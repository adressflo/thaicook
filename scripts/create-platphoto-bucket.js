// Cr√©er le bucket platphoto et configurer ses permissions
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://lkaiwnkyoztebplqoifc.supabase.co';
const supabaseServiceKey = 'sbp_1ba0bad09468be39860696c966dab20a9094efbe';

// Utiliser la service key pour avoir les droits d'admin
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function createPlatphotoBucket() {
  console.log('ü™£ CR√âATION DU BUCKET PLATPHOTO...\n');

  try {
    // 1. V√©rifier les buckets existants
    console.log('üìã V√©rification des buckets existants...');
    const { data: existingBuckets, error: listError } = await supabase.storage.listBuckets();

    if (listError) {
      console.log('‚ùå Erreur listBuckets:', listError.message);
      return;
    }

    console.log('üì¶ Buckets trouv√©s:', existingBuckets?.map(b => `${b.name} (${b.public ? 'PUBLIC' : 'PRIV√â'})`) || 'aucun');

    const platphotoExists = existingBuckets?.find(b => b.name === 'platphoto');

    if (platphotoExists) {
      console.log('‚úÖ Bucket platphoto existe d√©j√† !');
      console.log(`   Status: ${platphotoExists.public ? 'PUBLIC ‚úÖ' : 'PRIV√â ‚ö†Ô∏è'}`);
    } else {
      console.log('üÜï Cr√©ation du bucket platphoto...');

      // 2. Cr√©er le bucket
      const { data: newBucket, error: createError } = await supabase.storage.createBucket('platphoto', {
        public: true,
        allowedMimeTypes: [
          'image/jpeg',
          'image/jpg',
          'image/png',
          'image/webp',
          'image/gif'
        ],
        fileSizeLimit: 5242880 // 5MB
      });

      if (createError) {
        console.log('‚ùå Erreur cr√©ation bucket:', createError.message);
        return;
      }

      console.log('‚úÖ Bucket platphoto cr√©√© avec succ√®s !');
      console.log('üìã Configuration:', {
        name: 'platphoto',
        public: true,
        maxSize: '5MB',
        types: 'Images seulement'
      });
    }

    // 3. Cr√©er le fichier extra.png par d√©faut s'il n'existe pas
    console.log('\nüñºÔ∏è  V√©rification de l\'image par d√©faut...');

    try {
      const { data: existingFile, error: downloadError } = await supabase.storage
        .from('platphoto')
        .download('extra.png');

      if (downloadError) {
        console.log('üìÅ Image par d√©faut manquante, cr√©ation...');

        // Cr√©er un fichier SVG simple comme image par d√©faut
        const defaultImageSVG = `
<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewBox="0 0 200 200">
  <rect width="200" height="200" fill="#f0f0f0"/>
  <circle cx="100" cy="80" r="30" fill="#ddd"/>
  <rect x="70" y="120" width="60" height="40" rx="5" fill="#ddd"/>
  <text x="100" y="175" text-anchor="middle" font-family="Arial" font-size="12" fill="#999">
    Extra Thai
  </text>
</svg>`;

        const svgBlob = new Blob([defaultImageSVG], { type: 'image/svg+xml' });

        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('platphoto')
          .upload('extra.png', svgBlob, {
            cacheControl: '3600',
            upsert: true,
            contentType: 'image/svg+xml'
          });

        if (uploadError) {
          console.log('‚ùå Erreur upload image par d√©faut:', uploadError.message);
        } else {
          console.log('‚úÖ Image par d√©faut cr√©√©e:', uploadData.path);
        }
      } else {
        console.log('‚úÖ Image par d√©faut existe d√©j√†');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Erreur v√©rification image par d√©faut:', error.message);
    }

    // 4. Test d'upload dans le bucket
    console.log('\nüß™ Test d\'upload dans platphoto...');

    const testFile = new Blob(['Test Upload Platphoto'], { type: 'text/plain' });
    const testFileName = `test-upload-${Date.now()}.txt`;

    const { data: testUpload, error: testError } = await supabase.storage
      .from('platphoto')
      .upload(testFileName, testFile, {
        cacheControl: '3600',
        upsert: false
      });

    if (testError) {
      console.log('‚ùå Test upload √©chou√©:', testError.message);

      if (testError.message.includes('row-level security policy')) {
        console.log('üö® PROBL√àME RLS D√âTECT√â !');
        console.log('   ‚Üí Il faut configurer les politiques RLS pour storage.objects');
        console.log('   ‚Üí Solution: Ex√©cuter les politiques RLS dans Supabase Dashboard');
      }
    } else {
      console.log('‚úÖ Test upload r√©ussi !');
      console.log(`üìÅ Fichier: ${testUpload.path}`);

      // URL publique
      const { data: publicUrl } = supabase.storage
        .from('platphoto')
        .getPublicUrl(testUpload.path);

      console.log(`üîó URL publique: ${publicUrl.publicUrl}`);

      // Nettoyer le fichier test
      await supabase.storage.from('platphoto').remove([testUpload.path]);
      console.log('üßπ Fichier test supprim√©');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

createPlatphotoBucket().then(() => {
  console.log('\nüèÅ Configuration bucket platphoto termin√©e !');
  process.exit(0);
}).catch(console.error);